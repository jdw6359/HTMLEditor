/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;
import java.io.*;
import java.awt.*;
import javax.swing.*;

import commands.*;


/**
 *
 * @author Anshul
 */
@SuppressWarnings("serial")
public class EditorGUI extends javax.swing.JFrame {

    /**
     * Creates new form EditorGUI
     */
    private EditorGUI() {
        initComponents();
    }
    
    private static EditorGUI instance=new EditorGUI();
    
    public static EditorGUI getInstance(){
    	return instance;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
   
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFrame1 = new javax.swing.JFrame();
        backPanel = new javax.swing.JPanel();
        autoWrapButton = new javax.swing.JToggleButton();
        autoIndentationButton = new javax.swing.JToggleButton();
        tabbedPane = new javax.swing.JTabbedPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        FileMenu = new javax.swing.JMenu();
        newFile = new javax.swing.JMenuItem();
        openFile = new javax.swing.JMenuItem();
        saveFile = new javax.swing.JMenuItem();
        EditMenu = new javax.swing.JMenu();
        cut = new javax.swing.JMenuItem();
        paste = new javax.swing.JMenuItem();
        insertTag = new javax.swing.JMenu();
        insertHeaderTag = new javax.swing.JMenuItem();
        insertBoldTag = new javax.swing.JMenuItem();
        insertItalicTag = new javax.swing.JMenuItem();
        insertTableTag = new javax.swing.JMenuItem();
        insertListTag = new javax.swing.JMenu();
        insertNumberedListTag = new javax.swing.JMenuItem();
        insertBulletedListTag = new javax.swing.JMenuItem();
        insertDictionaryTag = new javax.swing.JMenuItem();
        RunMenu = new javax.swing.JMenu();
        validateHTML = new javax.swing.JMenuItem();
        PreferenceMenu = new javax.swing.JMenu();
        indentationSetting = new javax.swing.JMenuItem();

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout backPanelLayout = new javax.swing.GroupLayout(backPanel);
        backPanel.setLayout(backPanelLayout);
        backPanelLayout.setHorizontalGroup(
            backPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        backPanelLayout.setVerticalGroup(
            backPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 381, Short.MAX_VALUE)
        );

        autoWrapButton.setText("Auto-Wrap");
        autoWrapButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autoWrapButtonActionPerformed(evt);
            }
        });

        autoIndentationButton.setText("Auto-Indentation");
        autoIndentationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autoIndentationButtonActionPerformed(evt);
            }
        });

        tabbedPane.addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentRemoved(java.awt.event.ContainerEvent evt) {
                tabbedPaneComponentRemoved(evt);
            }
        });
        tabbedPane.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tabbedPaneKeyPressed(evt);
            }
        });

        FileMenu.setText("File");
        FileMenu.addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentAdded(java.awt.event.ContainerEvent evt) {
                FileMenuComponentAdded(evt);
            }
        });
        FileMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FileMenuActionPerformed(evt);
            }
        });

        newFile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        newFile.setText("New");
        newFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newFileActionPerformed(evt);
            }
        });
        FileMenu.add(newFile);

        openFile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        openFile.setText("Open");
        openFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openFileActionPerformed(evt);
            }
        });
        openFile.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                openFileKeyPressed(evt);
            }
        });
        FileMenu.add(openFile);

        saveFile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        saveFile.setText("Save");
        saveFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveFileActionPerformed(evt);
            }
        });
        FileMenu.add(saveFile);

        jMenuBar1.add(FileMenu);

        EditMenu.setText("Edit");

        cut.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        cut.setText("Cut");
        cut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cutActionPerformed(evt);
            }
        });
        EditMenu.add(cut);

        paste.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        paste.setText("Paste");
        paste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pasteActionPerformed(evt);
            }
        });
        EditMenu.add(paste);

        insertTag.setText("Insert Tag");

        insertHeaderTag.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.ALT_MASK));
        insertHeaderTag.setText("Header");
        insertTag.add(insertHeaderTag);
        insertHeaderTag.addActionListener(new java.awt.event.ActionListener(){
        	public void actionPerformed(java.awt.event.ActionEvent evt){
        		addHeaderTagActionPerformed(evt);
        	}
        });

        insertBoldTag.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.ALT_MASK));
        insertBoldTag.setText("Bold");
        insertTag.add(insertBoldTag);
        insertBoldTag.addActionListener(new java.awt.event.ActionListener(){
        	public void actionPerformed(java.awt.event.ActionEvent evt){
        		addBoldTagActionPerformed(evt);
        	}
        });

        insertItalicTag.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.ALT_MASK));
        insertItalicTag.setText("Italic");
        insertTag.add(insertItalicTag);
        insertItalicTag.addActionListener(new java.awt.event.ActionListener(){
        	public void actionPerformed(java.awt.event.ActionEvent evt){
        		addItalicTagActionPerformed(evt);
        	}
        });

        insertTableTag.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.ALT_MASK));
        insertTableTag.setText("Table");
        insertTag.add(insertTableTag);
        insertTableTag.addActionListener(new java.awt.event.ActionListener(){
        	public void actionPerformed(java.awt.event.ActionEvent evt){
        		addTableTagActionPerformed(evt);
        	}
        });

        insertListTag.setText("List");

        insertNumberedListTag.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_1, java.awt.event.InputEvent.ALT_MASK));
        insertNumberedListTag.setText("Numbered");
        insertListTag.add(insertNumberedListTag);
        insertNumberedListTag.addActionListener(new java.awt.event.ActionListener(){
        	public void actionPerformed(java.awt.event.ActionEvent evt){
        		addNumberedTagActionPerformed(evt);
        	}
        });

        insertBulletedListTag.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_2, java.awt.event.InputEvent.ALT_MASK));
        insertBulletedListTag.setText("Bulleted");
        insertListTag.add(insertBulletedListTag);
        insertBulletedListTag.addActionListener(new java.awt.event.ActionListener(){
        	public void actionPerformed(java.awt.event.ActionEvent evt){
        		addBulletedTagActionPerformed(evt);
        	}
        });

        insertDictionaryTag.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_3, java.awt.event.InputEvent.ALT_MASK));
        insertDictionaryTag.setText("Dictionary");
        insertListTag.add(insertDictionaryTag);
        insertDictionaryTag.addActionListener(new java.awt.event.ActionListener(){
        	public void actionPerformed(java.awt.event.ActionEvent evt){
        		addDictionaryTagActionPerformed(evt);
        	}
        });

        insertTag.add(insertListTag);

        EditMenu.add(insertTag);

        jMenuBar1.add(EditMenu);

        RunMenu.setText("Run");

        validateHTML.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F9, 0));
        validateHTML.setText("Validate HTML");
        validateHTML.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                validateHTMLActionPerformed(evt);
            }
        });
        RunMenu.add(validateHTML);

        jMenuBar1.add(RunMenu);

        PreferenceMenu.setText("Preference");

        indentationSetting.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        indentationSetting.setText("Indentation Setting");
        indentationSetting.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                indentationSettingActionPerformed(evt);
            }
        });
        PreferenceMenu.add(indentationSetting);

        jMenuBar1.add(PreferenceMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(tabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 1138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(backPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addComponent(autoWrapButton, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(autoIndentationButton, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(autoWrapButton)
                    .addComponent(autoIndentationButton))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(76, 76, 76)
                        .addComponent(backPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tabbedPane)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    
    
    //TODO: Here are all of the action listener methods, fill these with appropriate command objects
    
    
    private void addHeaderTagActionPerformed(java.awt.event.ActionEvent evt){
    	
    	AddSimpleTag addTag=new AddSimpleTag();
    	addTag.execute("h1", "",0,tabbedPane.getSelectedIndex() );
    }
    
    private void addBoldTagActionPerformed(java.awt.event.ActionEvent evt){
    	
    	AddSimpleTag addTag=new AddSimpleTag();
    	addTag.execute("b","",0,tabbedPane.getSelectedIndex());
    }
    
    private void addItalicTagActionPerformed(java.awt.event.ActionEvent evt){
       	AddSimpleTag addTag=new AddSimpleTag();
    	addTag.execute("i","",0,tabbedPane.getSelectedIndex());
    }
    
    private void addTableTagActionPerformed(java.awt.event.ActionEvent evt){
    	System.out.println("Adding Table Tag");
    }
    
    private void addNumberedTagActionPerformed(java.awt.event.ActionEvent evt){
    	System.out.println("Adding Numbered Tag");
    }
    
    private void addBulletedTagActionPerformed(java.awt.event.ActionEvent evt){
    	System.out.println("Adding Bulleted Tag");
    }
    
    private void addDictionaryTagActionPerformed(java.awt.event.ActionEvent evt){
    	System.out.println("Adding Dictionary Tag");
    }
    
    
    String textBefore, textAfter, cutText="";   // Strings used for cut and paste functionality
    private void cutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cutActionPerformed
        
        Component c = tabbedPane.getComponent(0);
        JTextArea textData = (JTextArea) c;
        cutText = textData.getSelectedText(); //Selected text to be cut
        
        int start = textData.getSelectionStart(); //Index of start of selection
        int end = textData.getSelectionEnd(); //Index of end of selection
        textBefore = textData.getText().substring(0, start);                        // String defined outside this method
        textAfter = textData.getText().substring(end, textData.getText().length());
        textData.setText(textBefore + textAfter);
        tabbedPane.setComponentAt(0, textData);
        
        
        System.out.println("Cutted text:"+cutText);
    }//GEN-LAST:event_cutActionPerformed

    private void autoIndentationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autoIndentationButtonActionPerformed
        // Action listener for auto indentation button
    }//GEN-LAST:event_autoIndentationButtonActionPerformed

    private void autoWrapButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autoWrapButtonActionPerformed
        // Action listener for Auto Wrap button
    }//GEN-LAST:event_autoWrapButtonActionPerformed

    private void openFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openFileActionPerformed
        
        JFileChooser chooser = new JFileChooser();
    
    int returnVal = chooser.showOpenDialog(null);
    if(returnVal == JFileChooser.APPROVE_OPTION) {
       System.out.println("Opening file " +
            chooser.getSelectedFile().getName());
    }
    }//GEN-LAST:event_openFileActionPerformed

    private void saveFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveFileActionPerformed
       
        JFileChooser chooser = new JFileChooser();
    
    int returnVal = chooser.showSaveDialog(null);
    if(returnVal == JFileChooser.APPROVE_OPTION) {
       System.out.println("Saving file " +
            chooser.getSelectedFile().getName());
    }//GEN-LAST:event_saveFileActionPerformed
    }
    private void newFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newFileActionPerformed
        
        NewFile newfile=new NewFile();
        newfile.execute();
        
       
    }//GEN-LAST:event_newFileActionPerformed

    private void FileMenuComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_FileMenuComponentAdded
        // NO IMPLEMENTATION NEEDED
    }//GEN-LAST:event_FileMenuComponentAdded

    private void FileMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FileMenuActionPerformed
        // NO IMPLEMENTATION NEEDED
    }//GEN-LAST:event_FileMenuActionPerformed

    private void openFileKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_openFileKeyPressed
        // Wrong listner placed --> Go to openFileActionPerformed
    }//GEN-LAST:event_openFileKeyPressed

    private void tabbedPaneKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tabbedPaneKeyPressed
        
        
        if( evt.getKeyCode() == java.awt.event.KeyEvent.VK_F1)  //Closes teh tab on pressing F1 key
        {
            System.out.println("Closing file");
            if( 1 != 0) {
                JFileChooser chooser = new JFileChooser();      // Prompts user to save file before closing
    
                int returnVal = chooser.showSaveDialog(null);
                if(returnVal == JFileChooser.APPROVE_OPTION) {
                System.out.println("Saving file " +
                chooser.getSelectedFile().getName());
                }   
            tabbedPane.remove(tabbedPane.getSelectedComponent());
            }
        }
    }//GEN-LAST:event_tabbedPaneKeyPressed

    private void tabbedPaneComponentRemoved(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_tabbedPaneComponentRemoved
        // NO IMPLEMTATION NEEDED
    }//GEN-LAST:event_tabbedPaneComponentRemoved

    private void pasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pasteActionPerformed

        System.out.println("Text to paste is " + cutText);
        
        Component c = tabbedPane.getComponent(0);
        JTextArea textData = (JTextArea) c;
        int indexToPlaceText = textData.getSelectionStart();
        textBefore = textData.getText().substring(0, indexToPlaceText);
        textAfter = textData.getText().substring(indexToPlaceText);
        textData.setText(textBefore + cutText + textAfter);
        tabbedPane.setComponentAt(0, textData);        
        
    }//GEN-LAST:event_pasteActionPerformed

    private void validateHTMLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_validateHTMLActionPerformed
        // Action Listener to check for correct HTML format.
    }//GEN-LAST:event_validateHTMLActionPerformed

    private void indentationSettingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_indentationSettingActionPerformed
        // Prompts a window to change setting for indentation. For manual indentation.
    }//GEN-LAST:event_indentationSettingActionPerformed

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EditorGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EditorGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EditorGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EditorGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EditorGUI().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu EditMenu;
    private javax.swing.JMenu FileMenu;
    private javax.swing.JMenu PreferenceMenu;
    private javax.swing.JMenu RunMenu;
    private javax.swing.JToggleButton autoIndentationButton;
    private javax.swing.JToggleButton autoWrapButton;
    private javax.swing.JPanel backPanel;
    private javax.swing.JMenuItem cut;
    private javax.swing.JMenuItem indentationSetting;
    private javax.swing.JMenuItem insertBoldTag;
    private javax.swing.JMenuItem insertBulletedListTag;
    private javax.swing.JMenuItem insertDictionaryTag;
    private javax.swing.JMenuItem insertHeaderTag;
    private javax.swing.JMenuItem insertItalicTag;
    private javax.swing.JMenu insertListTag;
    private javax.swing.JMenuItem insertNumberedListTag;
    private javax.swing.JMenuItem insertTableTag;
    private javax.swing.JMenu insertTag;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem newFile;
    private javax.swing.JMenuItem openFile;
    private javax.swing.JMenuItem paste;
    private javax.swing.JMenuItem saveFile;
    private javax.swing.JTabbedPane tabbedPane;
    private javax.swing.JMenuItem validateHTML;
    // End of variables declaration//GEN-END:variables
	
	public void addPane(){
    	JTextArea area=new JTextArea();
    	tabbedPane.addTab("Default.html",area);
    	
    }
	
	public void addText(String text, int tabNum){
		JTextArea pane=(JTextArea) tabbedPane.getComponentAt(tabNum);
		pane.append(text);
	}
}
